name: Release

on:
  push:
    tags:
      - 'v*' # 当推送v开头的tag时触发

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  build-and-upload:
    needs: create-release
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
      
    - name: Build project
      run: npm run build
      
    - name: Package application
      run: npm run package

    - name: Determine artifact extension
      id: artifact
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          echo "extension=exe" >> $GITHUB_ENV
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          echo "extension=zip" >> $GITHUB_ENV
        else
          echo "extension=AppImage" >> $GITHUB_ENV
        fi
      
    - name: Get version from package.json
      id: version
      shell: bash
      run: |
        VERSION=$(jq -r .version package.json)
        echo "version=$VERSION" >> $GITHUB_ENV
        
    - name: Determine artifact path
      id: artifact_path
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          echo "artifact_path=dist/APTXCODE ${{ env.version }}.exe" >> $GITHUB_ENV
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          echo "artifact_path=dist/APTXCODE-${{ env.version }}-${{ runner.arch }}.dmg" >> $GITHUB_ENV
        else
          echo "artifact_path=dist/APTXCODE-${{ env.version }}.AppImage" >> $GITHUB_ENV
        fi
    
    - name: Determin asset name
      id: asset_name
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          echo "artifact_name=APTXCODE_v${{ env.version }}_windows_x64.exe" >> $GITHUB_ENV
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          echo "artifact_name=APTXCODE_v${{ env.version }}_darwin_arm64.dmg" >> $GITHUB_ENV
        else
          echo "artifact_name=APTXCODE_v${{ env.version }}_linux_x64.AppImage" >> $GITHUB_ENV
        fi
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.artifact_path }}
        asset_name: ${{ env.artifact_name }}
        asset_content_type: application/octet-stream
